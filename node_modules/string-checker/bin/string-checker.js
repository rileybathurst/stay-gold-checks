"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const options_1 = require("./options");
const output_1 = require("./output");
const results_output_1 = require("./results-output");
const setup_output_1 = require("./setup-output");
const findInFiles = require('find-in-files');
const search = () => __awaiter(void 0, void 0, void 0, function* () {
    const promises = [];
    options_1.options.searchStrings.forEach((searchString) => {
        promises.push(new Promise(resolve => {
            findInFiles.find(searchString, options_1.options.dir).then((results) => {
                resolve(results_output_1.logResults(results, searchString));
            });
        }));
    });
    return Promise.all(promises);
});
exports.stringChecker = () => {
    let error = false;
    let outputMessage = '';
    outputMessage += `${setup_output_1.logTerms()}\n`;
    outputMessage += `${setup_output_1.logExclusions()}\n`;
    outputMessage += `string-check - results:\n`;
    search().then(x => {
        x.forEach((result) => {
            outputMessage += (result.outputMessage);
            if (result.error) {
                error = true;
            }
        });
        output_1.output(outputMessage);
        if (error) {
            process.exit(1);
        }
    });
};
